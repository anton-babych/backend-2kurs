{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { ChangeDetectionStrategy, Component, Input, ViewChild } from '@angular/core';\nimport { FormContainerComponent } from \"../form/form-container.component\";\nimport { AsyncPipe, NgIf } from \"@angular/common\";\nimport { BehaviorSubject } from \"rxjs\";\nlet GridItemComponent = class GridItemComponent {\n  constructor() {\n    this.buttonsVisible = false;\n    this.formIsVisible$ = new BehaviorSubject(false);\n  }\n\n  onMouseMove(mouseEvent) {\n    const rect = this.itemElement.nativeElement.getBoundingClientRect(),\n          x = mouseEvent.clientX - rect.left,\n          y = mouseEvent.clientY - rect.top;\n    this.itemElement.nativeElement.style.setProperty(\"--mouse-x\", `${x}px`);\n    this.itemElement.nativeElement.style.setProperty(\"--mouse-y\", `${y}px`);\n  }\n\n  onMouseEnter() {\n    this.buttonsVisible = true;\n  }\n\n  onMouseLeave() {\n    this.buttonsVisible = false;\n  }\n\n  onGridClick() {\n    this.formIsVisible$.next(true);\n  }\n\n  onFormIsDone() {\n    this.formIsVisible$.next(false);\n  }\n\n};\n\n__decorate([Input()], GridItemComponent.prototype, \"type\", void 0);\n\n__decorate([Input()], GridItemComponent.prototype, \"item\", void 0);\n\n__decorate([ViewChild('itemHTML')], GridItemComponent.prototype, \"itemElement\", void 0);\n\nGridItemComponent = __decorate([Component({\n  selector: 'grid-item',\n  template: `\n    <div class=\"grid-item\" #itemHTML\n         (mouseenter)=\"onMouseEnter()\"\n         (mousemove)=\"onMouseMove($event)\"\n         (mouseleave)=\"onMouseLeave()\"\n         (click)=\"onGridClick()\">\n      <div class=\"grid-item__image-container\">\n        <img [src]=\"item.imagePath\" alt=\"\" class=\"grid-item__image\">\n      </div>\n      <div class=\"grid-item__text-container\">\n        <p class=\"grid-item__name\">{{item.name}}</p>\n        <p class=\"grid-item__price\">{{item.price}} грн</p>\n      </div>\n\n      <form-container *ngIf=\"formIsVisible$ | async\"\n                      [item]=\"item\"\n                      [type]=\"type\"\n                      (isDone)=\"onFormIsDone()\">\n      </form-container>\n    </div>\n  `,\n  styles: [`\n    .grid {\n      &-item {\n        width: 100%;\n        aspect-ratio: .75;\n        border: 1px solid #3f3f3f;\n        display: flex;\n        flex-direction: column;\n        justify-content: space-evenly;\n        overflow: hidden;\n        position: relative;\n\n        &:hover::before {\n          opacity: 1;\n        }\n\n        &::before {\n          content: \"\";\n          height: 100%;\n          width: 100%;\n          left: 0;\n          top: 0;\n          position: absolute;\n          z-index: 2;\n          background: radial-gradient(500px circle at var(--mouse-x) var(--mouse-y), rgba(255, 255, 255, 0.06), transparent 40%);\n          border-radius: inherit;\n          opacity: 0;\n          transition: opacity 500ms;\n        }\n\n        &__image-container {\n          width: 100%;\n          height: 60%;\n\n          position: relative;\n          display: inline-block;\n        }\n\n        &__image {\n          position: absolute;\n          left: 50%;\n          transform: translateX(-50%);\n          height: 80%;\n        }\n\n        &__text-container {\n          height: auto;\n\n          display: flex;\n          flex-direction: column;\n          justify-content: center;\n          place-items: center;\n        }\n\n        &__name {\n          font-weight: 500;\n          margin-bottom: 5px;\n          font-size: 16px;\n        }\n\n        &__price {\n          font-weight: 100;\n          font-size: 12px;\n        }\n\n        &__buttons {\n          position: absolute;\n          top: 0;\n          right: 0;\n\n          display: flex;\n          flex-direction: row-reverse;\n          width: 100%;\n          height: 100px;\n\n          &__button {\n            z-index: 10;\n            cursor: pointer;\n            width: 20px;\n            height: 20px;\n          }\n\n          &__open {\n            background-color: #a1a1a1;\n            background-image: url(\"https://www.awwwards.com/assets/redesign/images/sprite-icons.svg#link\");\n          }\n\n          &__edit {\n            background-color: #d24040;\n          }\n\n          &__delete {\n            background-color: #ffa216;\n          }\n        }\n      }\n    }\n  `],\n  standalone: true,\n  imports: [FormContainerComponent, NgIf, AsyncPipe],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})], GridItemComponent);\nexport { GridItemComponent };","map":{"version":3,"mappings":";AAAA,SAAQA,uBAAR,EAAiCC,SAAjC,EAAwDC,KAAxD,EAA+DC,SAA/D,QAA+E,eAA/E;AAIA,SAAQC,sBAAR,QAAqC,kCAArC;AACA,SAAQC,SAAR,EAAmBC,IAAnB,QAA8B,iBAA9B;AACA,SAAQC,eAAR,QAA8B,MAA9B;AAmIA,IAAaC,iBAAiB,GAA9B,MAAaA,iBAAb,CAA8B;EAA9BC;IAKE,sBAA0B,KAA1B;IACA,sBAA2C,IAAIF,eAAJ,CAA6B,KAA7B,CAA3C;EA2BD;;EAxBCG,WAAW,CAACC,UAAD,EAAuB;IAChC,MAAMC,IAAI,GAAG,KAAKC,WAAL,CAAiBC,aAAjB,CAA+BC,qBAA/B,EAAb;IAAA,MACEC,CAAC,GAAGL,UAAU,CAACM,OAAX,GAAqBL,IAAI,CAACM,IADhC;IAAA,MAEEC,CAAC,GAAGR,UAAU,CAACS,OAAX,GAAqBR,IAAI,CAACS,GAFhC;IAIA,KAAKR,WAAL,CAAiBC,aAAjB,CAA+BQ,KAA/B,CAAqCC,WAArC,CAAiD,WAAjD,EAA8D,GAAGP,CAAC,IAAlE;IACA,KAAKH,WAAL,CAAiBC,aAAjB,CAA+BQ,KAA/B,CAAqCC,WAArC,CAAiD,WAAjD,EAA8D,GAAGJ,CAAC,IAAlE;EACD;;EAEDK,YAAY;IACV,KAAKC,cAAL,GAAsB,IAAtB;EACD;;EAEDC,YAAY;IACV,KAAKD,cAAL,GAAsB,KAAtB;EACD;;EAEDE,WAAW;IACT,KAAKC,cAAL,CAAoBC,IAApB,CAAyB,IAAzB;EACD;;EAEDC,YAAY;IACV,KAAKF,cAAL,CAAoBC,IAApB,CAAyB,KAAzB;EACD;;AAhC2B,CAA9B;;AACWE,YAAR7B,KAAK,EAAG;;AACA6B,YAAR7B,KAAK,EAAG;;AACc6B,YAAtB5B,SAAS,CAAC,UAAD,CAAa;;AAHZK,iBAAiB,eAjI7BP,SAAS,CAAC;EACT+B,QAAQ,EAAE,WADD;EAETC,QAAQ,EAAE;;;;;;;;;;;;;;;;;;;;GAFD;EAuBTC,MAAM,EAAE,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAD,CAvBC;EAyHTC,UAAU,EAAE,IAzHH;EA0HTC,OAAO,EAAE,CACPhC,sBADO,EAEPE,IAFO,EAGPD,SAHO,CA1HA;EA+HTgC,eAAe,EAAErC,uBAAuB,CAACsC;AA/HhC,CAAD,CAiIoB,GAAjB9B,iBAAiB,CAAjB;SAAAA","names":["ChangeDetectionStrategy","Component","Input","ViewChild","FormContainerComponent","AsyncPipe","NgIf","BehaviorSubject","GridItemComponent","constructor","onMouseMove","mouseEvent","rect","itemElement","nativeElement","getBoundingClientRect","x","clientX","left","y","clientY","top","style","setProperty","onMouseEnter","buttonsVisible","onMouseLeave","onGridClick","formIsVisible$","next","onFormIsDone","__decorate","selector","template","styles","standalone","imports","changeDetection","OnPush"],"sourceRoot":"","sources":["C:\\Users\\Abob\\Desktop\\back-end2kurs\\angular\\app\\src\\app\\features\\grid\\grid-item.component.ts"],"sourcesContent":["import {ChangeDetectionStrategy, Component, ElementRef, Input, ViewChild} from '@angular/core';\n\nimport {ShortItemModel} from \"../../core/models/shortItemModel\";\nimport {Types} from \"../../core/enums/TYPES\";\nimport {FormContainerComponent} from \"../form/form-container.component\";\nimport {AsyncPipe, NgIf} from \"@angular/common\";\nimport {BehaviorSubject} from \"rxjs\";\n\n@Component({\n  selector: 'grid-item',\n  template: `\n    <div class=\"grid-item\" #itemHTML\n         (mouseenter)=\"onMouseEnter()\"\n         (mousemove)=\"onMouseMove($event)\"\n         (mouseleave)=\"onMouseLeave()\"\n         (click)=\"onGridClick()\">\n      <div class=\"grid-item__image-container\">\n        <img [src]=\"item.imagePath\" alt=\"\" class=\"grid-item__image\">\n      </div>\n      <div class=\"grid-item__text-container\">\n        <p class=\"grid-item__name\">{{item.name}}</p>\n        <p class=\"grid-item__price\">{{item.price}} грн</p>\n      </div>\n\n      <form-container *ngIf=\"formIsVisible$ | async\"\n                      [item]=\"item\"\n                      [type]=\"type\"\n                      (isDone)=\"onFormIsDone()\">\n      </form-container>\n    </div>\n  `,\n  styles: [`\n    .grid {\n      &-item {\n        width: 100%;\n        aspect-ratio: .75;\n        border: 1px solid #3f3f3f;\n        display: flex;\n        flex-direction: column;\n        justify-content: space-evenly;\n        overflow: hidden;\n        position: relative;\n\n        &:hover::before {\n          opacity: 1;\n        }\n\n        &::before {\n          content: \"\";\n          height: 100%;\n          width: 100%;\n          left: 0;\n          top: 0;\n          position: absolute;\n          z-index: 2;\n          background: radial-gradient(500px circle at var(--mouse-x) var(--mouse-y), rgba(255, 255, 255, 0.06), transparent 40%);\n          border-radius: inherit;\n          opacity: 0;\n          transition: opacity 500ms;\n        }\n\n        &__image-container {\n          width: 100%;\n          height: 60%;\n\n          position: relative;\n          display: inline-block;\n        }\n\n        &__image {\n          position: absolute;\n          left: 50%;\n          transform: translateX(-50%);\n          height: 80%;\n        }\n\n        &__text-container {\n          height: auto;\n\n          display: flex;\n          flex-direction: column;\n          justify-content: center;\n          place-items: center;\n        }\n\n        &__name {\n          font-weight: 500;\n          margin-bottom: 5px;\n          font-size: 16px;\n        }\n\n        &__price {\n          font-weight: 100;\n          font-size: 12px;\n        }\n\n        &__buttons {\n          position: absolute;\n          top: 0;\n          right: 0;\n\n          display: flex;\n          flex-direction: row-reverse;\n          width: 100%;\n          height: 100px;\n\n          &__button {\n            z-index: 10;\n            cursor: pointer;\n            width: 20px;\n            height: 20px;\n          }\n\n          &__open {\n            background-color: #a1a1a1;\n            background-image: url(\"https://www.awwwards.com/assets/redesign/images/sprite-icons.svg#link\");\n          }\n\n          &__edit {\n            background-color: #d24040;\n          }\n\n          &__delete {\n            background-color: #ffa216;\n          }\n        }\n      }\n    }\n  `],\n  standalone: true,\n  imports: [\n    FormContainerComponent,\n    NgIf,\n    AsyncPipe\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GridItemComponent {\n  @Input() type!: Types;\n  @Input() item!: ShortItemModel;\n  @ViewChild('itemHTML') itemElement!: ElementRef;\n\n  buttonsVisible: boolean = false;\n  formIsVisible$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n\n\n  onMouseMove(mouseEvent: MouseEvent) {\n    const rect = this.itemElement.nativeElement.getBoundingClientRect(),\n      x = mouseEvent.clientX - rect.left,\n      y = mouseEvent.clientY - rect.top;\n\n    this.itemElement.nativeElement.style.setProperty(\"--mouse-x\", `${x}px`);\n    this.itemElement.nativeElement.style.setProperty(\"--mouse-y\", `${y}px`);\n  }\n\n  onMouseEnter() {\n    this.buttonsVisible = true;\n  }\n\n  onMouseLeave() {\n    this.buttonsVisible = false\n  }\n\n  onGridClick() {\n    this.formIsVisible$.next(true);\n  }\n\n  onFormIsDone(){\n    this.formIsVisible$.next(false);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}