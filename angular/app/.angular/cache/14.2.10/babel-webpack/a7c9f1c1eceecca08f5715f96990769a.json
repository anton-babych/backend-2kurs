{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport { BehaviorSubject, catchError, of, tap, throwError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let HelmetService = /*#__PURE__*/(() => {\n  class HelmetService {\n    constructor(http) {\n      this.http = http;\n      this.testData = [];\n      this.data = new BehaviorSubject(this.testData);\n    }\n\n    read() {\n      if (this.data.value.length) {\n        return of(this.data.value);\n      }\n\n      return this.http.get(`http://localhost:8080/api/${this.dataPath}`).pipe(tap(payload => {\n        this.data.next(payload);\n      }), catchError(this.handleError));\n    }\n\n    updateById(item) {\n      this.data.next(this.data.value.map(a => a.id === item.id ? item : a));\n      const headers = new HttpHeaders();\n      headers.append('Content-Type', 'application/json');\n      let body = JSON.stringify(item);\n      this.http.put(`http://localhost:8080/api/${this.dataPath}`, body, {\n        headers: headers\n      }).pipe(catchError(this.handleError));\n    }\n\n    create(item) {\n      let dat = this.data.value;\n      dat.push(item);\n      this.data.next(dat);\n      const headers = new HttpHeaders();\n      headers.append('Content-Type', 'application/json');\n      let body = JSON.stringify(item);\n      this.http.post(`http://localhost:8080/api/${this.dataPath}`, body, {\n        headers: headers\n      }).pipe(catchError(this.handleError));\n    }\n\n    delete(item) {\n      this.data.next(this.data.value.filter(x => x.id !== item.id));\n      this.http.delete(`http://localhost:8080/api/${this.dataPath}/${item.id}`).pipe(catchError(this.handleError));\n    }\n\n    handleError(err) {\n      if (err.error instanceof ErrorEvent) {\n        console.log('client', err.message);\n      } else {\n        console.log('server', err.status);\n      }\n\n      return throwError(() => new Error(err.message));\n    }\n\n  }\n\n  HelmetService.ɵfac = function HelmetService_Factory(t) {\n    return new (t || HelmetService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  HelmetService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HelmetService,\n    factory: HelmetService.ɵfac,\n    providedIn: 'root'\n  });\n  return HelmetService;\n})();","map":null,"metadata":{},"sourceType":"module"}